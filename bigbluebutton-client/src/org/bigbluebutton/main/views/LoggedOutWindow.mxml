<?xml version="1.0" encoding="utf-8"?>

<!--

BigBlueButton open source conferencing system - http://www.bigbluebutton.org/

Copyright (c) 2012 BigBlueButton Inc. and by respective authors (see below).

This program is free software; you can redistribute it and/or modify it under the
terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 3.0 of the License, or (at your option) any later
version.

BigBlueButton is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along
with BigBlueButton; if not, see <http://www.gnu.org/licenses/>.

-->

<mx:TitleWindow xmlns:mx="library://ns.adobe.com/flex/mx" xmlns:fx="http://ns.adobe.com/mxml/2009"
    title="{ResourceUtil.getInstance().getString('bbb.logout.title')}" showCloseButton="false" creationComplete="init()"
    verticalScrollPolicy="off" horizontalScrollPolicy="off"
    x="168" y="86" layout="vertical" width="400" horizontalAlign="center">
	<fx:Script>
		<![CDATA[
			import com.asfusion.mate.events.Dispatcher;
			
			import org.as3commons.logging.api.ILogger;
			import org.as3commons.logging.api.getClassLogger;
			import org.bigbluebutton.core.PopUpUtil;
			import org.bigbluebutton.core.UsersUtil;
			import org.bigbluebutton.main.events.InvalidAuthTokenEvent;
			import org.bigbluebutton.main.events.LogoutEvent;
			import org.bigbluebutton.main.events.MeetingNotFoundEvent;
			import org.bigbluebutton.main.model.users.events.ConnectionFailedEvent;
			import org.bigbluebutton.util.i18n.ResourceUtil;
			
			private static const LOGGER:ILogger = getClassLogger(LoggedOutWindow);

			[Bindable]
			private var message:String;

			private function init():void {
				addEventListener(Event.CLOSE, onUserLoggedOutWindowClose);
			}

			private function callSignOut():void {
				var d:Dispatcher = new Dispatcher();
				d.dispatchEvent(new LogoutEvent(LogoutEvent.SIGN_OUT));
			}

			private function onUserLoggedOutWindowClose(e:Event):void {
				LOGGER.debug("Closing UserLoggedOutWindow");
				PopUpUtil.removePopUp(this);
			}

			public function setReason(reason:String):void {
				var logData:Object = UsersUtil.initLogData();
				logData.tags = ["connection"];
				logData.message = "User logged out.";
				logData.reason = reason;
				LOGGER.info(JSON.stringify(logData));

				switch (reason) {
					case ConnectionFailedEvent.APP_SHUTDOWN:
						message = ResourceUtil.getInstance().getString('bbb.logout.appshutdown');
						break;
					case ConnectionFailedEvent.ASYNC_ERROR:
						message = ResourceUtil.getInstance().getString('bbb.logout.asyncerror');
						break;
					case ConnectionFailedEvent.CONNECTION_CLOSED:
						message = ResourceUtil.getInstance().getString('bbb.logout.connectionclosed');
						break;
					case ConnectionFailedEvent.CONNECTION_FAILED:
						message = ResourceUtil.getInstance().getString('bbb.logout.connectionfailed');
						break;
					case ConnectionFailedEvent.CONNECTION_REJECTED:
						message = ResourceUtil.getInstance().getString('bbb.logout.rejected');
						break;
					case ConnectionFailedEvent.INVALID_APP:
						message = ResourceUtil.getInstance().getString('bbb.logout.invalidapp');
						break;
					case ConnectionFailedEvent.UNKNOWN_REASON:
						message = ResourceUtil.getInstance().getString('bbb.logout.unknown');
						break;
					case ConnectionFailedEvent.USER_EJECTED_FROM_MEETING:
						var reasonCode: String = UsersUtil.getEjectReason();
						if (reasonCode == "duplicate_user_in_meeting_eject_reason") {
							message = ResourceUtil.getInstance().getString('bbb.logout.duplicateUserEjectReason');
						} else if (reasonCode == "not_enough_permission_eject_reason") {
							message = ResourceUtil.getInstance().getString('bbb.logout.permissionEjectReason');
						} else if (reasonCode == "user_requested_eject_reason") {
							message = ResourceUtil.getInstance().getString('bbb.logout.ejectedFromMeeting');
						} else if (reasonCode == "validate_token_failed_eject_reason") {
							message = ResourceUtil.getInstance().getString('bbb.logout.validateTokenFailedEjectReason');
						}
						break;
					case ConnectionFailedEvent.USER_LOGGED_OUT:
						message = ResourceUtil.getInstance().getString('bbb.logout.usercommand');
						break;
					case MeetingNotFoundEvent.MEETING_NOT_FOUND:
						message = ResourceUtil.getInstance().getString('bbb.mainshell.meetingNotFound');
						break; 
					case InvalidAuthTokenEvent.INVALID_AUTH_TOKEN:
						message = ResourceUtil.getInstance().getString('bbb.mainshell.invalidAuthToken')
						break;  
				}
				if (message && UsersUtil.isBreakout()) {
					message += "\n" + ResourceUtil.getInstance().getString('bbb.logout.breakoutRoomClose');
				}
			}
		]]>
	</fx:Script>
	<mx:VBox width="100%" height="100%" horizontalAlign="center">
		<mx:Text text="{message}" textAlign="center"/>
		<mx:Button id="okBtn" styleName="mainActionButton" label="{ResourceUtil.getInstance().getString('bbb.logout.button.label')}" click="callSignOut()"/>
	</mx:VBox>
</mx:TitleWindow> 
